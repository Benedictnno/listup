generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VENDOR
  ADMIN
}

enum AdType {
  STOREFRONT
  PRODUCT_PROMOTION
  SEARCH_BOOST
}

enum AdStatus {
  PENDING
  ACTIVE
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  phone     String?  @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile fields
  profileImage String?
  bio          String?
  dateOfBirth  DateTime?
  gender       String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?

  // Password reset fields
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?

  // Relations
  listings             Listing[]
  ads                  Ad[]
  payments             Payment[]
  vendorProfile        VendorProfile?
  favorites            Favorite[]
  savedSearches        SavedSearch[]
  PhoneVerification    PhoneVerification[]
  userPreferences      UserPreferences?
  NotificationSettings NotificationSettings?
}

model VendorProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  storeName        String
  storeDescription String?
  storeAddress     String
  businessCategory String
  coverImage       String?
  logo             String?
  website          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Vendor verification fields
  isVerified       Boolean  @default(false)
  verificationStatus String @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason  String?
  verifiedAt       DateTime?
  verifiedBy       String?  @db.ObjectId // Admin user ID who verified

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  Ad     Ad[]

  // New relations
  businessHours BusinessHours?
  socialMedia   SocialMedia?
  storeSettings StoreSettings?
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings Listing[]
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  images      String[]
  location    String?
  condition   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sellerId String @db.ObjectId
  seller   User   @relation(fields: [sellerId], references: [id])

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  isActive Boolean @default(true)

  // ðŸ‘‡ add this line for relation with Favorite
  favorites  Favorite[]
  Ad         Ad[]
  boostScore Int        @default(0)
}

model PhoneVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  phone     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)

  @@index([userId])
  @@index([phone])
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId])
  @@index([userId])
}

model SavedSearch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  query     Json
  label     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AdPlan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  adType    AdType
  price     Int // in Naira
  duration  Int // in days
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ads Ad[]
}

model Ad {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      AdType
  status    AdStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime

  vendorId String @db.ObjectId
  vendor   User   @relation(fields: [vendorId], references: [id])

  storeId String?        @db.ObjectId
  store   VendorProfile? @relation(fields: [storeId], references: [id])

  productId String?  @db.ObjectId
  product   Listing? @relation(fields: [productId], references: [id])

  appliesToAllProducts Boolean? @default(false)

  paymentStatus PaymentStatus @default(PENDING)
  amount        Float
  transactionId String? // Paystack/Stripe ref

  createdAt DateTime  @default(now())
  AdPlan    AdPlan?   @relation(fields: [adPlanId], references: [id])
  adPlanId  String?   @db.ObjectId
  Payment   Payment[]
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  reference String        @unique
  amount    Int
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  adId String @db.ObjectId
  ad   Ad     @relation(fields: [adId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// New models for comprehensive settings
model BusinessHours {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  monday    Json // { open: "09:00", close: "18:00", closed: false }
  tuesday   Json // { open: "09:00", close: "18:00", closed: false }
  wednesday Json // { open: "09:00", close: "18:00", closed: false }
  thursday  Json // { open: "09:00", close: "18:00", closed: false }
  friday    Json // { open: "09:00", close: "18:00", closed: false }
  saturday  Json // { open: "10:00", close: "16:00", closed: false }
  sunday    Json // { open: "12:00", close: "16:00", closed: true }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorProfileId String        @unique @db.ObjectId
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id])
}

model SocialMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorProfileId String        @unique @db.ObjectId
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id])
}

model StoreSettings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  autoSave    Boolean  @default(true)
  emailDigest Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendorProfileId String        @unique @db.ObjectId
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id])
}

model UserPreferences {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  language   String   @default("English")
  timezone   String   @default("Africa/Lagos")
  currency   String   @default("NGN")
  dateFormat String   @default("DD/MM/YYYY")
  theme      String   @default("light") // light, dark, auto
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Order notifications
  orderUpdates         Boolean @default(true)
  newMessages          Boolean @default(true)
  lowStockAlerts       Boolean @default(true)
  paymentNotifications Boolean @default(true)

  // Marketing & reports
  marketingEmails Boolean @default(false)
  weeklyReports   Boolean @default(true)
  monthlyReports  Boolean @default(true)

  // Security notifications
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Password reset verification codes
model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String   // 6-digit verification code
  expiresAt DateTime // When the code expires
  used      Boolean  @default(false) // Whether the code has been used
  createdAt DateTime @default(now())
  
  // Index for quick lookups
  @@index([email, code])
  @@index([expiresAt])
}
