generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VENDOR
  ADMIN
}

enum AdType {
  STOREFRONT
  PRODUCT_PROMOTION
  SEARCH_BOOST
}

enum AdStatus {
  PENDING
  ACTIVE
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  phone     String?  @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  listings          Listing[]
  ads               Ad[]
  payments          Payment[]
  vendorProfile     VendorProfile?
  favorites         Favorite[]
  savedSearches     SavedSearch[]
  PhoneVerification PhoneVerification[]
}

model VendorProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  storeName        String
  storeAddress     String
  businessCategory String
  coverImage       String?
  createdAt        DateTime @default(now())

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings Listing[]
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  images      String[]
  location    String?
  condition   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sellerId String @db.ObjectId
  seller   User   @relation(fields: [sellerId], references: [id])

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  isActive Boolean @default(true)

  // ðŸ‘‡ add this line for relation with Favorite
  favorites  Favorite[]
  Ad         Ad[]
  boostScore Int        @default(0)
}

model PhoneVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  phone     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)

  @@index([userId])
  @@index([phone])
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId])
  @@index([userId])
}

model SavedSearch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  query     Json
  label     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Ad {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      AdType
  status    AdStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  vendorId String @db.ObjectId
  vendor   User   @relation(fields: [vendorId], references: [id])

  listingId String?  @db.ObjectId
  listing   Listing? @relation(fields: [listingId], references: [id])

  payments Payment[]

  @@index([endDate])
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  reference String        @unique
  amount    Int
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  adId String @db.ObjectId
  ad   Ad     @relation(fields: [adId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}
